# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-step-functions-pj

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  profile: lg_sandbox # optoinal profile shold be listed in ~/.aws/credentials
  region: ${opt:region, 'us-west-2'} # optoinal
  timeout: 120
  stage: ${opt:stage, 'sandbox'}


# provider:

#   name: aws
#   runtime: nodejs12.x

# you can overwrite defaults here
#  stage: dev
  # region: eu-west-1


functions:
  hello:
    handler: handler.hello
  ciao:
    handler: handler.ciao

stepFunctions:
  stateMachines:
    hellostepfunc1:
      name: 'hello'
      definition:
        Comment: "A Hello World example of the Amazon States Language using an AWS Lambda Function"
        StartAt: Choice State
        States:
          Choice State:
            Type: Choice
            Choices:
              - Variable: "$.type"
                StringEquals: HelloWorld
                Next: HelloWorld
              - Variable: "$.type"
                StringEquals: CiaoWorld
                Next: CiaoWorld
            Default: DEFAULT_STATE
          HelloWorld:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:getFileMapDetails-sandbox-hello"
            End: true
          CiaoWorld:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-ciao"
            End: true
          DEFAULT_STATE:
            Type: Pass
            End: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"


